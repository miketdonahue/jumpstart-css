// If true, sets the grid margins at each breakpoint
//
// @param $has-margin {Boolean} - Set false to remove grid container margins
// @param $grid-margins {Map} - A map of responsive grid margin values
// @param $breakpoints {Map} - A map of responsive breakpoint values
//
// ** The default values for $grid-margins and $breakpoints come from global settings **
//
// Usage:
//   @include grid-margin(false);
@mixin grid-margin(
  $has-margin,
  $grid-margins: $grid-margins,
  $breakpoints: $breakpoints
) {
  @if ($has-margin) {
    margin: 0 map-get($grid-margins, 'base');

    @each $breakpoint in map-keys($breakpoints) {
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        margin: 0 map-get($grid-margins, $breakpoint);
      }
    }
  } @else {
    margin: 0;
  }
}

// Given a position for justify-items, sets IE fallback property on child divs
//
// @param $position {CSS Value} - A valid value for the justify-items property
//
// Usage:
//   @include justify-items-fallback(center);
@mixin justify-items-fallback($position) {
   > div {
    -ms-grid-column-align: $position;
  }
}

// Given a position for align-items, sets IE fallback property on child divs
//
// @param $position {CSS Value} - A valid value for the align-items property
//
// Usage:
//   @include align-items-fallback(center);
@mixin align-items-fallback($position) {
   > div {
    -ms-grid-row-align: $position;
  }
}

// Given start and span values, sets the elements column position
//
// @param $start {Number} - Starting column position
// @param $span {Number} - Number of columns to span from starting point
//
// Usage:
//   @include grid-column(1, 3);
@mixin grid-column($start, $span) {
      grid-column: #{$start} / #{$start + $span};
  -ms-grid-column: ($start + $start) - 1;
  -ms-grid-column-span: ($span + $span) - 1;
}

// Given start and span values, sets the elements row position
//
// @param $start {Number} - Starting row position
// @param $span {Number} - Number of row to span from starting point
//
// Usage:
//   @include grid-row(1, 3);
@mixin grid-row($start, $span) {
      grid-row: #{$start} / #{$start + $span};
  -ms-grid-row: ($start + $start) - 1;
  -ms-grid-row-span: ($span + $span) - 1;
}

// Sets justify-self position for given element
//
// @param $position {CSS Value} - A valid value for the justify-self property
//
// Usage:
//   @include justify-self(center);
@mixin justify-self($position) {
  justify-self: $position;
  -ms-grid-column-align: $position !important;
}

// Sets align-self position for given element
//
// @param $position {CSS Value} - A valid value for the align-self property
//
// Usage:
//   @include align-self(center);
@mixin align-self($position) {
  -ms-grid-row-align: $position !important;
  align-self: $position;
}

// Given a map of grid options, produces a CSS Grid
//
// @param $options {Map} - A map of grid options
// @param $options.grid-template-columns {Number|CSS Values} - A single number or set of valid grid column values
// @param $options.grid-template-rows {Number|CSS Values} - A single number or set of valid grid row values
// @param $options.grid-column-gap {CSS Value} - A valid value for grid column gap
// @param $options.grid-row-gap {CSS Value} - A valid value for grid row gap
// @param $options.justify-items {CSS Value} - A valid grid justify-items position value
// @param $options.align-items {CSS Value} - A valid grid align-items position value
// @param $options.inline {Boolean} - Set to true to create an inline-grid
//
// Usage:
//   @include grid();
//
//   @include grid((
//     grid-template-columns: repeat(12, 1fr),
//     grid-template-rows: 1fr 1fr
//   ));
@mixin grid($options: ()) {
  $grid-template-columns: map-get($options, 'grid-template-columns') or repeat(12, 1fr);
  $grid-template-rows: map-get($options, 'grid-template-rows') or 1fr;
  $grid-column-gap: map-get($options, 'grid-column-gap') or 16px;
  $grid-row-gap: map-get($options, 'grid-row-gap') or 0;
  $grid-margin: map-get($options, 'grid-margin') != false;
  $justify-items: map-get($options, 'justify-items') or stretch;
  $align-items: map-get($options, 'align-items') or stretch;
  $inline: map-get($options, 'inline') == true;

  @if ($inline) {
    display: -ms-inline-grid;
    display:     inline-grid;
  } @else {
    display: -ms-grid;
    display:     grid;
  }

  grid-template-columns: $grid-template-columns;
  grid-template-rows: $grid-template-rows;
  -ms-grid-columns: ms-set-tracks($grid-template-columns, $grid-column-gap);
  -ms-grid-rows: ms-set-tracks($grid-template-rows, $grid-row-gap);

  grid-column-gap: $grid-column-gap;
  grid-row-gap: $grid-row-gap;

  @include grid-margin($grid-margin);

  justify-items: $justify-items;
  @include justify-items-fallback($justify-items);

  align-items: $align-items;
  @include align-items-fallback($align-items);
}
